---
import aiTools from '../../public/ai-tools.json' assert { type: 'json' };
const categories = [...new Set(aiTools.map((tool: any) => tool.category))];

const capitalize = (str: string) => {
  return str
    .split('_')
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join(' ');
};
---

<div class="relative">
  <button
    id="categoryButton"
    class="w-full flex items-center justify-between p-2 text-sm text-gray-600 bg-white
           border border-gray-200 rounded-lg hover:bg-gray-100">
    <div class="flex items-center gap-2">
      <span class="material-icons text-sm">category</span>
      <span class="text-sm font-medium" id="selectedCategory">Categories</span>
    </div>
    <span class="material-icons transition-transform duration-200" id="dropdownArrow">expand_more</span>
  </button>

  <div id="categoryDropdown"
    class="absolute z-10 w-full mt-1 hidden bg-white border border-gray-200 rounded-lg shadow-lg">
    <div class="grid grid-cols-1 gap-1 p-2">
      {
        categories.map((category) => (
          <div class="category-item px-4 py-2 text-sm text-gray-700 hover:bg-indigo-50 rounded-md 
                    cursor-pointer transition-colors" data-category={category}>
            {capitalize(category)}
          </div>
        ))
      }
    </div>
  </div>
</div>

<script>
  const button = document.getElementById('categoryButton');
  const dropdown = document.getElementById('categoryDropdown');
  const arrow = document.getElementById('dropdownArrow');
  const selectedCategory = document.getElementById('selectedCategory');
  const categoryItems = document.querySelectorAll('.category-item');

  // Function to filter tools
  const filterTools = (category: string) => {
    const tools = document.querySelectorAll('.tool-card');
    tools.forEach(tool => {
      const toolCategory = tool.getAttribute('data-category');
      if (toolCategory === category || category === 'all') {
        (tool as HTMLElement).style.display = 'block';
      } else {
        (tool as HTMLElement).style.display = 'none';
      }
    });
  };

  categoryItems.forEach(item => {
    item.addEventListener('click', (e) => {
      const category = (e.currentTarget as HTMLElement).getAttribute('data-category') || '';
      selectedCategory!.textContent = category === 'all' 
        ? 'Categories' 
        : capitalize(category);
      
      filterTools(category);
      dropdown?.classList.add('hidden');
      arrow?.classList.remove('rotate-180');
    });
  });

  button?.addEventListener('click', () => {
    dropdown?.classList.toggle('hidden');
    arrow?.classList.toggle('rotate-180');
  });

  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    if (!target.closest('#categoryButton') && !dropdown?.classList.contains('hidden')) {
      dropdown?.classList.add('hidden');
      arrow?.classList.remove('rotate-180');
    }
  });

  // Helper function to capitalize
  function capitalize(str: string) {
    return str
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join(' ');
  }
</script>
