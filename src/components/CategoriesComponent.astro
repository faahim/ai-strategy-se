---
import aiTools from '../../public/ai-tools.json' assert { type: 'json' };
const categories = [...new Set(aiTools.map((tool: any) => tool.category))];

// Count tools per category
const categoryCounts = categories.reduce(
  (acc, category) => {
    acc[category] = aiTools.filter((tool) => tool.category === category).length;
    return acc;
  },
  {} as Record<string, number>
);

// Sort categories by count (descending)
const sortedCategories = categories.sort(
  (a, b) => categoryCounts[b] - categoryCounts[a]
);
---

<div class="relative">
  <button
    id="categoryButton"
    class="w-full flex items-center justify-between p-2 text-sm text-gray-600 bg-white
           border border-gray-200 rounded-lg hover:bg-gray-100">
    <div class="flex items-center gap-2">
      <span class="material-icons text-sm">category</span>
      <span class="text-sm font-medium capitalize" id="selectedCategory">Categories</span>
    </div>
    <span
      class="material-icons transition-transform duration-200"
      id="dropdownArrow">expand_more</span
    >
  </button>

  <div
    id="categoryDropdown"
    class="absolute z-10 w-full mt-1 hidden bg-white border border-gray-200 rounded-lg shadow-lg">
    <div class="grid grid-cols-1 gap-1 p-2">
      <!-- All Categories Button -->
      <div
        class="category-item px-4 py-2 text-sm text-gray-700 hover:bg-indigo-50 rounded-md
               cursor-pointer transition-colors flex items-center justify-between group"
        data-category="all">
        <span class="capitalize">All Categories</span>
        <span
          class="bg-indigo-100 px-2 py-0.5 rounded-full text-xs text-indigo-600 group-hover:bg-indigo-200">
          {aiTools.length}
        </span>
      </div>

      <div class="my-1 border-t border-gray-100"></div>

      {
        sortedCategories.map((category) => (
          <div
            class="category-item px-4 py-2 text-sm text-gray-700 hover:bg-indigo-50 rounded-md 
                   cursor-pointer transition-colors flex items-center justify-between group"
            data-category={category}>
            <span class="capitalize">{category.replace(/[_-]/g, ' ')}</span>
            <span class="bg-indigo-100 px-2 py-0.5 rounded-full text-xs text-indigo-600 group-hover:bg-indigo-200">
              {categoryCounts[category]}
            </span>
          </div>
        ))
      }
    </div>
  </div>
</div>

<script>
  const button = document.getElementById('categoryButton');
  const dropdown = document.getElementById('categoryDropdown');
  const arrow = document.getElementById('dropdownArrow');
  const selectedCategory = document.getElementById('selectedCategory');
  const categoryItems = document.querySelectorAll('.category-item');

  // Function to filter tools based on selected category
  const filterTools = (category: string) => {
    const tools = document.querySelectorAll('.tool-card');

    tools.forEach((tool) => {
      const toolCategory = tool.getAttribute('data-category');
      if (category === 'all' || toolCategory === category) {
        (tool as HTMLElement).style.display = 'block';
        (tool as HTMLElement).style.opacity = '1';
      } else {
        (tool as HTMLElement).style.opacity = '0';
        setTimeout(() => {
          (tool as HTMLElement).style.display = 'none';
        }, 300);
      }
    });
  };

  categoryItems.forEach((item) => {
    item.addEventListener('click', () => {
      const category = item.getAttribute('data-category');
      if (!category) return;

      // Update selected category text with both hyphen and underscore replacement
      selectedCategory!.textContent =
        category === 'all' ? 'Categories' : category.replace(/[_-]/g, ' ');

      // Add visual feedback for selected category
      categoryItems.forEach((cat) =>
        cat.classList.remove('bg-indigo-50', 'text-indigo-600')
      );
      item.classList.add('bg-indigo-50', 'text-indigo-600');

      filterTools(category);
    });
  });

  button?.addEventListener('click', () => {
    dropdown?.classList.toggle('hidden');
    arrow?.classList.toggle('rotate-180');
  });

  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    if (
      !target.closest('#categoryButton') && 
      !target.closest('.category-item') &&
      !dropdown?.classList.contains('hidden')
    ) {
      dropdown?.classList.add('hidden');
      arrow?.classList.remove('rotate-180');
    }
  });
</script>
