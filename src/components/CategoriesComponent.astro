---
import aiTools from '../assets/data/ai-tools.json' assert { type: 'json' };

// Define category groups
const categoryGroups: Record<string, string[]> = {
  "AI & Development": [
    "developer-tools", "code", "local_search_engine", "chatgpt-extensions",
    "ai-models", "llm models"
  ],
  "Content & Creation": [
    "writing-assistants", "content-creation", "text-generators",
    "graphic-design", "image-libraries", "video"
  ],
  "Business & Productivity": [
    "productivity", "business", "marketing", "customer-support",
    "automation", "no-code"
  ],
  "Education & Research": [
    "education", "academia", "learning-resource", "machine-learning",
    "deep-learning", "research"
  ],
  "Communication & Media": [
    "speech", "meeting-assistants", "phone-calls", "ai-voice-cloning",
    "services", "stable-Diffusion-resources"
  ],
  "Tools & Services": [
    "search-engine", "marketplace", "ai-safety", "finance",
    "events", "design"
  ]
};

// Calculate group counts and sort groups by count
const groupCountsAndNames = Object.entries(categoryGroups).map(([group, categories]) => {
  const uniqueTools = new Set(
    aiTools.filter(tool => categories.includes(tool.category)).map(tool => tool.id)
  );
  return {
    group,
    categories,
    count: uniqueTools.size
  };
}).sort((a, b) => b.count - a.count);

// Convert back to record for easy access
const groupCounts = groupCountsAndNames.reduce((acc, {group, count}) => {
  acc[group] = count;
  return acc;
}, {} as Record<string, number>);
---

<div class="mt-8">
  <h3 class="text-sm font-medium text-gray-500 mb-3">Categories</h3>
  <div class="space-y-2">
    <!-- All Categories Option -->
    <button
      class="category-group w-full px-3 py-2 text-sm text-gray-700 hover:bg-indigo-50 rounded-md
             cursor-pointer transition-colors flex items-center justify-between group"
      data-categories="all"
    >
      <span>All Categories</span>
      <span class="bg-indigo-100 px-2 py-0.5 rounded-full text-xs text-indigo-600 group-hover:bg-indigo-200">
        {aiTools.length}
      </span>
    </button>

    {groupCountsAndNames.map(({group, categories, count}) => (
      <button
        class="category-group w-full px-3 py-2 text-sm text-gray-600 hover:bg-indigo-50 rounded-md
               cursor-pointer transition-colors flex items-center justify-between group"
        data-categories={categories.join(',')}
      >
        <span>{group}</span>
        <span class="bg-indigo-100 px-2 py-0.5 rounded-full text-xs text-indigo-600 group-hover:bg-indigo-200">
          {count}
        </span>
      </button>
    ))}
  </div>
</div>

<script>
  const categoryGroups = document.querySelectorAll('.category-group');
  
  categoryGroups.forEach(group => {
    group.addEventListener('click', () => {
      const categories = group.getAttribute('data-categories')?.split(',');
      const groupName = group.querySelector('span')?.textContent;
      if (!categories) return;

      // Update visual selection
      categoryGroups.forEach(g => g.classList.remove('bg-indigo-100', 'text-indigo-700'));
      group.classList.add('bg-indigo-100', 'text-indigo-700');

      if (groupName === 'All Categories') {
        // Show all tools and sections
        const tools = document.querySelectorAll('.tool-card');
        tools.forEach(tool => {
          (tool as HTMLElement).style.display = 'block';
        });

        document.querySelectorAll('[data-category-group]').forEach(section => {
          (section as HTMLElement).style.display = 'block';
        });

        // Scroll to top
        window.scrollTo({
          top: 0,
          behavior: 'smooth'
        });
      } else {
        // Filter tools
        const tools = document.querySelectorAll('.tool-card');
        tools.forEach(tool => {
          const toolCategory = tool.getAttribute('data-category');
          if (categories.includes(toolCategory!)) {
            (tool as HTMLElement).style.display = 'block';
          } else {
            (tool as HTMLElement).style.display = 'none';
          }
        });

        // Scroll to selected category
        const categorySection = document.querySelector(`[data-category-group="${groupName}"]`);
        if (categorySection) {
          categorySection.scrollIntoView({ behavior: 'smooth' });
        }
      }

      // Update empty state
      const searchEmptyState = document.getElementById('searchEmptyState');
      const visibleTools = document.querySelectorAll('.tool-card[style*="display: block"]');
      searchEmptyState?.classList.toggle('hidden', visibleTools.length > 0);
    });
  });
</script>

<style>
  .tool-card {
    transition: opacity 300ms ease-in-out;
  }

  [data-category-group] {
    transition: opacity 300ms ease-in-out;
  }

  #searchEmptyState {
    transition: opacity 300ms ease-in-out;
  }
</style>
