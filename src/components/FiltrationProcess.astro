---
import aiTools from '../assets/data/ai-tools.json' assert { type: 'json' };
import EmptyStateComponent from '../components/EmptyStateComponent.astro';
import FilteredResultsComponent from '../components/FilteredResultsComponent.astro';
import HeaderComponent from '../components/HeaderComponent.astro';
import LeftAsideComponent from '../components/LeftAsideComponent.astro';
import ResultsCounterComponent from '../components/ResultsCounterComponent.astro';
import SearchAndSortComponent from '../components/SearchAndSortComponent.astro';
import TagsComponent from '../components/TagsComponent.astro';
---

<script>
  const searchInput = document.querySelector('input[type="search"]');
  const toolsGrid = document.getElementById('toolsGrid')!;
  const searchEmptyState = document.getElementById('searchEmptyState')!;
  const toolCards = document.querySelectorAll('.tool-card');

  function updateSearchResults() {
    const visibleTools = document.querySelectorAll(
      '.tool-card:not([style*="display: none"])'
    );
    const categorySections = document.querySelectorAll(
      '[data-category-section]'
    );
    let hasVisibleTools = false;

    // Check each category section
    categorySections.forEach((section) => {
      const toolsInSection = section.querySelectorAll(
        '.tool-card:not([style*="display: none"])'
      );
      if (toolsInSection.length === 0) {
        (section as HTMLElement).style.display = 'none';
      } else {
        (section as HTMLElement).style.display = 'block';
        hasVisibleTools = true;
      }
    });

    // Show/hide empty state
    if (!hasVisibleTools) {
      searchEmptyState?.classList.remove('hidden');
    } else {
      searchEmptyState?.classList.add('hidden');
    }
  }

  // Listen for input changes
  searchInput?.addEventListener('input', updateSearchResults);

  // Listen for changes to tool card visibility
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (
        mutation.type === 'attributes' &&
        mutation.attributeName === 'style'
      ) {
        updateSearchResults();
      }
    });
  });

  toolCards.forEach((card) => {
    observer.observe(card, { attributes: true });
  });

  // Initial check
  updateSearchResults();
</script>

<style>
  .tool-card {
    transition: all 300ms ease-in-out;
  }
</style>
