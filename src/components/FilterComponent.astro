---
import aiTools from '../assets/data/ai-tools.json' assert { type: 'json' };
import TagsComponent from './TagsComponent.astro';
import ToolbarComponent from './ToolbarComponent.astro';
import EmptyStateComponent from './EmptyStateComponent.astro';
import CategoriesComponent from './CategoriesComponent.astro';

interface Tool {
  id: number;
  name: string;
  description: string;
  category: string;
  tags: string[];
}

// Define category groups
const categoryGroups = {
  "AI & Development": [
    "developer-tools", "code", "local_search_engine", "chatgpt-extensions",
    "ai-models", "llm models"
  ],
  "Content & Creation": [
    "writing-assistants", "content-creation", "text-generators",
    "graphic-design", "image-libraries", "video"
  ],
  "Business & Productivity": [
    "productivity", "business", "marketing", "customer-support",
    "automation", "no-code"
  ],
  "Education & Research": [
    "education", "academia", "learning-resource", "machine-learning",
    "deep-learning", "research"
  ],
  "Communication & Media": [
    "speech", "meeting-assistants", "phone-calls", "ai-voice-cloning",
    "services", "stable-Diffusion-resources"
  ],
  "Tools & Services": [
    "search-engine", "marketplace", "ai-safety", "finance",
    "events", "design"
  ]
} as const;

// Sort categories by count within their groups
const categoriesByGroup = Object.entries(categoryGroups).reduce((acc, [group, categories]) => {
  const categoriesWithCount = categories
    .filter(category => aiTools.some(tool => tool.category === category))
    .map(category => ({
      category,
      count: aiTools.filter(tool => tool.category === category).length
    }))
    .sort((a, b) => b.count - a.count);
    
  acc[group] = categoriesWithCount.map(c => c.category);
  return acc;
}, {} as Record<string, string[]>);

// Sort groups by total tool count
const groupsWithCounts = Object.entries(categoriesByGroup).map(([group, categories]) => {
  const totalTools = categories.reduce((sum, category) => 
    sum + aiTools.filter(tool => tool.category === category).length, 0
  );
  return { group, categories, count: totalTools };
}).sort((a, b) => b.count - a.count);

// Group tools by category
const toolsByCategory = Object.values(categoryGroups).flat().reduce((acc, category) => {
  acc[category] = aiTools.filter((tool: Tool) => tool.category === category);
  return acc;
}, {} as Record<string, Tool[]>);
---

<div>
  <div class="flex h-screen max-w-full mx-auto">
    <aside class="w-1/4 flex fixed left-0 top-0">
      <!-- Primary Sidebar -->
      <div class="bg-[#0F0B1F] min-h-screen flex flex-col border-r border-gray-800">
        <!-- Logo Section -->
        <div class="p-4 border-b border-gray-800 mx-auto">
          <div
            class="size-8 text-4xl rounded-lg flex items-center justify-center text-orange-300 font-semibold">
            <a href="/">ai</a>
          </div>
        </div>

        <!-- Main Navigation -->
        <div class="flex-1 py-4">
          <div class="px-4 space-y-1">
            <div
              class="hover:bg-[#2D2A3B] p-2 rounded-lg cursor-pointer flex items-center justify-center">
              <span class="material-icons text-gray-400">apps</span>
            </div>
            <div
              class="hover:bg-[#2D2A3B] p-2 rounded-lg cursor-pointer flex items-center justify-center">
              <span class="material-icons text-gray-400">view_agenda</span>
            </div>
            <div
              class="hover:bg-[#2D2A3B] p-2 rounded-lg cursor-pointer flex items-center justify-center">
              <span class="material-icons text-gray-400">person</span>
            </div>
            <div
              class="hover:bg-[#2D2A3B] p-2 rounded-lg cursor-pointer flex items-center justify-center">
              <span class="material-icons text-gray-400">analytics</span>
            </div>
            <div
              class="hover:bg-[#2D2A3B] p-2 rounded-lg cursor-pointer flex items-center justify-center">
              <span class="material-icons text-gray-400">extension</span>
            </div>
          </div>
        </div>

        <!-- Bottom Section -->
        <div class="py-4 border-gray-800">
          <div class="px-4 space-y-1">
            <div
              class="hover:bg-[#2D2A3B] p-2 rounded-lg cursor-pointer flex items-center justify-center">
              <span class="material-icons text-gray-400">settings</span>
            </div>
            <div
              class="hover:bg-[#2D2A3B] p-2 rounded-lg cursor-pointer flex items-center justify-center">
              <span class="material-icons text-gray-400">grid_view</span>
            </div>
            <div
              class="hover:bg-[#2D2A3B] p-2 rounded-lg cursor-pointer flex items-center justify-center">
              <span class="material-icons text-gray-400">chat</span>
            </div>
            <div
              class="hover:bg-[#2D2A3B] p-2 rounded-lg cursor-pointer flex items-center justify-center">
              <span class="material-icons text-gray-400">account_circle</span>
            </div>
            <div class="border-t border-gray-500"></div>
            <div
              class="hover:bg-[#2D2A3B] p-2 rounded-lg cursor-pointer flex items-center justify-center">
              <span class="material-icons text-gray-400">logout</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Secondary Sidebar -->
      <div class="flex-1 bg-white border-r border-gray-200">
        <div class="p-4">
          <h2 class="text-xl font-semibold">Integrations</h2>
          <button
            class="mt-4 w-full text-left px-4 py-2 border border-gray-300 rounded-lg text-blue-600 hover:bg-gray-50 flex items-center cursor-pointer">
            <span class="material-icons text-blue-600 mr-2">add</span>
            New integration
          </button>

          <!-- Connections Section -->
          <div class="mt-6">
            <div
              class="flex items-center text-gray-600 cursor-pointer hover:bg-gray-100 p-2 rounded-lg">
              <span class="material-icons mr-2 text-sm">link</span>
              <span class="text-sm font-medium">Connections</span>
            </div>
          </div>

          <!-- Directory Section -->
          <div class="mt-1">
            <div
              class="flex items-center text-gray-600 cursor-pointer hover:bg-gray-100 p-2 rounded-lg">
              <span class="material-icons mr-2 text-sm">code</span>
              <span class="text-sm font-medium">API connections</span>
            </div>
          </div>

          <!-- API Connections Section -->
          <div class="mt-1">
            <div
              class="flex items-center text-gray-600 cursor-pointer hover:bg-gray-100 p-2 rounded-lg">
              <span class="material-icons mr-2 text-sm">folder</span>
              <span class="text-sm font-medium">Directory</span>
            </div>
          </div>

          <!-- Categories -->
          <CategoriesComponent />
        </div>
      </div>
    </aside>

    <main class="w-3/4 ml-auto px-5 md:px-10 mt-10">
      <div class="text-left mb-5">
        <h1 class="text-2xl font-semibold mb-2">Community data sources</h1>
        <p class="text-gray-600">
          Data sources let you connect community platforms to Ahoy. You may need
          admin access to connect data sources.
        </p>
        <p class="font-normal text-gray-600 mt-5">
          RECOMMENDED <span class="material-icons text-sm text-yellow-500">star</span>
        </p>
      </div>

      <!-- Search and filter section -->
      <div>
        <TagsComponent />
        <ToolbarComponent />
      </div>

      <!-- Results section with category groups -->
      <div class="relative min-h-[200px] pb-60">
        {groupsWithCounts.map(({group, categories, count}) => (
          <div class="mb-16" data-category-group={group}>
            <h2 class="text-2xl font-bold mb-8 text-gray-800 flex items-center gap-2">
              {group}
              <span class="text-base font-normal text-gray-500">
                ({count} tools)
              </span>
            </h2>
            
            {categories.map(category => (
              toolsByCategory[category]?.length > 0 && (
                <div class="mb-12" data-category-section={category}>
                  <h3 class="text-xl font-semibold mb-6 flex items-center gap-2 text-gray-700 pl-4 border-l-4 border-indigo-400">
                    <span class="capitalize">{category.replace(/[_-]/g, ' ')}</span>
                    <span class="text-sm font-normal text-gray-500">
                      ({toolsByCategory[category].length})
                    </span>
                  </h3>
                  
                  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                    {toolsByCategory[category].map((tool) => (
                      <div 
                        class="tool-card p-5 bg-white rounded-lg border border-gray-200 hover:border-indigo-500 
                               hover:bg-[#FBFAFF] hover:shadow-md hover:shadow-indigo-500/10 
                               hover:outline hover:outline-indigo-200 cursor-pointer group transition-all duration-300"
                        data-category={tool.category}
                        data-tags={tool.tags.join(',')}
                      >
                        <div class="flex items-center gap-3 mb-3">
                          <h2 class="text-[15px] font-medium text-gray-900">
                            {tool.name}
                          </h2>
                        </div>

                        <p class="text-[13px] text-gray-600 mb-6 line-clamp-2 leading-relaxed">
                          {tool.description}
                        </p>

                        <button class="py-[6px] px-4 rounded-md border border-gray-200 text-[13px] font-medium text-gray-700 hover:bg-gray-50 transition-colors flex items-center justify-center gap-2 group-hover:bg-white group-hover:border-gray-300 shadow-md">
                          <span class="material-icons text-[18px]">link</span>
                          Connect
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )
            ))}
          </div>
        ))}
        
        <!-- Empty state -->
        <div id="searchEmptyState" class="hidden absolute inset-0">
          <EmptyStateComponent />
        </div>
      </div>
    </main>
  </div>
</div>

<script>
  const searchInput = document.querySelector('input[type="search"]');
  const toolsGrid = document.getElementById('toolsGrid')!;
  const searchEmptyState = document.getElementById('searchEmptyState')!;
  const toolCards = document.querySelectorAll('.tool-card');

  function updateSearchResults() {
    const visibleTools = document.querySelectorAll('.tool-card:not([style*="display: none"])');
    const categorySections = document.querySelectorAll('[data-category-section]');
    let hasVisibleTools = false;

    // Check each category section
    categorySections.forEach(section => {
      const toolsInSection = section.querySelectorAll('.tool-card:not([style*="display: none"])');
      if (toolsInSection.length === 0) {
        (section as HTMLElement).style.display = 'none';
      } else {
        (section as HTMLElement).style.display = 'block';
        hasVisibleTools = true;
      }
    });

    // Show/hide empty state
    if (!hasVisibleTools) {
      searchEmptyState?.classList.remove('hidden');
    } else {
      searchEmptyState?.classList.add('hidden');
    }
  }

  // Listen for input changes
  searchInput?.addEventListener('input', updateSearchResults);

  // Listen for changes to tool card visibility
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'attributes' && mutation.attributeName === 'style') {
        updateSearchResults();
      }
    });
  });

  toolCards.forEach(card => {
    observer.observe(card, { attributes: true });
  });

  // Initial check
  updateSearchResults();
</script>

<style>
  .tool-card {
    transition: all 300ms ease-in-out;
  }
</style>
